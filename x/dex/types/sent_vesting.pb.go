// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vesting/dex/sent_vesting.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SentVesting struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VestingID string `protobuf:"bytes,2,opt,name=vestingID,proto3" json:"vestingID,omitempty"`
	Start     string `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	Duration  string `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Parts     string `protobuf:"bytes,5,opt,name=parts,proto3" json:"parts,omitempty"`
	Chain     string `protobuf:"bytes,6,opt,name=chain,proto3" json:"chain,omitempty"`
	Creator   string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *SentVesting) Reset()         { *m = SentVesting{} }
func (m *SentVesting) String() string { return proto.CompactTextString(m) }
func (*SentVesting) ProtoMessage()    {}
func (*SentVesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_90f8ce51aa6982d2, []int{0}
}
func (m *SentVesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentVesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SentVesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SentVesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentVesting.Merge(m, src)
}
func (m *SentVesting) XXX_Size() int {
	return m.Size()
}
func (m *SentVesting) XXX_DiscardUnknown() {
	xxx_messageInfo_SentVesting.DiscardUnknown(m)
}

var xxx_messageInfo_SentVesting proto.InternalMessageInfo

func (m *SentVesting) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SentVesting) GetVestingID() string {
	if m != nil {
		return m.VestingID
	}
	return ""
}

func (m *SentVesting) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *SentVesting) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *SentVesting) GetParts() string {
	if m != nil {
		return m.Parts
	}
	return ""
}

func (m *SentVesting) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *SentVesting) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*SentVesting)(nil), "vesting.dex.SentVesting")
}

func init() { proto.RegisterFile("vesting/dex/sent_vesting.proto", fileDescriptor_90f8ce51aa6982d2) }

var fileDescriptor_90f8ce51aa6982d2 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x4b, 0x2d, 0x2e,
	0xc9, 0xcc, 0x4b, 0xd7, 0x4f, 0x49, 0xad, 0xd0, 0x2f, 0x4e, 0xcd, 0x2b, 0x89, 0x87, 0x0a, 0xe8,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0xc3, 0xb8, 0x29, 0xa9, 0x15, 0x4a, 0x9b, 0x19, 0xb9,
	0xb8, 0x83, 0x53, 0xf3, 0x4a, 0xc2, 0x20, 0x62, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x32, 0x5c, 0x9c, 0x50, 0xe5, 0x9e, 0x2e,
	0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x08, 0x01, 0x21, 0x11, 0x2e, 0xd6, 0xe2, 0x92, 0xc4,
	0xa2, 0x12, 0x09, 0x66, 0xb0, 0x0c, 0x84, 0x23, 0x24, 0xc5, 0xc5, 0x91, 0x52, 0x5a, 0x94, 0x58,
	0x92, 0x99, 0x9f, 0x27, 0xc1, 0x02, 0x96, 0x80, 0xf3, 0x41, 0x3a, 0x0a, 0x12, 0x8b, 0x4a, 0x8a,
	0x25, 0x58, 0x21, 0x3a, 0xc0, 0x1c, 0x90, 0x68, 0x72, 0x46, 0x62, 0x66, 0x9e, 0x04, 0x1b, 0x44,
	0x14, 0xcc, 0x11, 0x92, 0xe0, 0x62, 0x4f, 0x2e, 0x4a, 0x4d, 0x2c, 0xc9, 0x2f, 0x92, 0x60, 0x07,
	0x8b, 0xc3, 0xb8, 0x4e, 0xba, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25,
	0x0c, 0xf3, 0x7c, 0x05, 0xd8, 0xfb, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x8f, 0x1b,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x36, 0xe6, 0xf9, 0x1a, 0x01, 0x00, 0x00,
}

func (m *SentVesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentVesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentVesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSentVesting(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintSentVesting(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parts) > 0 {
		i -= len(m.Parts)
		copy(dAtA[i:], m.Parts)
		i = encodeVarintSentVesting(dAtA, i, uint64(len(m.Parts)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintSentVesting(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Start) > 0 {
		i -= len(m.Start)
		copy(dAtA[i:], m.Start)
		i = encodeVarintSentVesting(dAtA, i, uint64(len(m.Start)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VestingID) > 0 {
		i -= len(m.VestingID)
		copy(dAtA[i:], m.VestingID)
		i = encodeVarintSentVesting(dAtA, i, uint64(len(m.VestingID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSentVesting(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSentVesting(dAtA []byte, offset int, v uint64) int {
	offset -= sovSentVesting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SentVesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSentVesting(uint64(m.Id))
	}
	l = len(m.VestingID)
	if l > 0 {
		n += 1 + l + sovSentVesting(uint64(l))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovSentVesting(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovSentVesting(uint64(l))
	}
	l = len(m.Parts)
	if l > 0 {
		n += 1 + l + sovSentVesting(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovSentVesting(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSentVesting(uint64(l))
	}
	return n
}

func sovSentVesting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSentVesting(x uint64) (n int) {
	return sovSentVesting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SentVesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentVesting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentVesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentVesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentVesting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentVesting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentVesting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentVesting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSentVesting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSentVesting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSentVesting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSentVesting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSentVesting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSentVesting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSentVesting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSentVesting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSentVesting = fmt.Errorf("proto: unexpected end of group")
)
